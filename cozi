#   Copyright (C) 2025 1337isnot1337 on Github (https://github.com/1337isnot1337)
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

#!/bin/bash

COZI_DIR="$HOME/.config/Vencord/cozi"
PLUGIN_REPOS="$COZI_DIR/pluginRepos"
MAIN_REPO="$COZI_DIR/mainRepo"
PLUGIN_LIST="$COZI_DIR/pluginList.txt"
VERBOSE=false

color() { echo -e "\e[$1m$2\e[0m"; }
verbose_output() { [ "$VERBOSE" = true ] && echo "$1"; }

initialize_cozi() {
    if [ ! -d "$COZI_DIR" ]; then
        color 34 "Initializing Cozi..."
        mkdir -p "$PLUGIN_REPOS"
        touch "$PLUGIN_LIST"
        color 32 "Cloning Vencord repository..."
        git clone https://github.com/Vendicated/Vencord "$MAIN_REPO" >/dev/null 2>&1
        cd "$MAIN_REPO" || exit
        pnpm install --frozen-lockfile >/dev/null 2>&1
        color 32 "Cozi setup complete!"
    fi
}
add_plugin() {
    local git_link="$1"
    if [ -z "$git_link" ]; then
        color 31 "Error: No git link or file provided."
        exit 1
    fi

    if [ -f "$git_link" ]; then
        color 32 "Reading plugin links from file: $git_link"
        while IFS= read -r line; do
            # skips commented lines if you want that
            if [ -n "$line" ] && [[ ! "$line" =~ ^# ]]; then
                add_single_plugin "$line"
            fi
        done <"$git_link"
        color 32 "All plugins installed successfully!"
        color 33 "Now, enable with ./cozi patch"
    else
        add_single_plugin "$git_link"
    fi
}

copy_plugin() {
    local repo_name="$1"
    local plugin_path="$PLUGIN_REPOS/$repo_name"
    local dest_path="$MAIN_REPO/src/userplugins/$repo_name"

    [ ! -d "$plugin_path" ] && {
        color 31 "Error: Plugin $repo_name not found."
        exit 1
    }

    color 32 "Copying plugin: $repo_name..."
    mkdir -p "$MAIN_REPO/src/userplugins"
    rsync -av --exclude='.git' "$plugin_path/" "$dest_path/" >/dev/null 2>&1 || {
        color 31 "Failed to copy $repo_name."
        exit 1
    }
}

remove_plugin() {
    local repo_name="$1"
    local dest_path="$MAIN_REPO/src/userplugins/$repo_name"

    [ ! -d "$dest_path" ] && {
        color 31 "Error: Plugin $repo_name not found."
        exit 1
    }

    color 32 "Removing plugin: $repo_name..."
    rm -rf "$dest_path" || {
        color 31 "Failed to remove $repo_name."
        exit 1
    }
}

delete_plugin() {
    local repo_name="$1"
    [ -z "$repo_name" ] && {
        color 31 "Error: No repository name provided."
        exit 1
    }
    local plugin_path="$PLUGIN_REPOS/$repo_name"

    [ ! -d "$plugin_path" ] && {
        color 31 "Error: Plugin $repo_name not found."
        exit 1
    }

    color 32 "Deleting plugin repository: $repo_name..."
    rm -rf "$plugin_path" || {
        color 31 "Failed to delete $repo_name."
        exit 1
    }
    sed -i "/$repo_name/d" "$PLUGIN_LIST"
}

patch_vencord() {
    color 32 "Building and injecting Vencord..."
    cd "$MAIN_REPO" || exit

    pnpm build >/dev/null 2>&1 || {
        color 31 "Build failed."
        exit 1
    }

    color 32 "Attempting Auto-Patch"

    # Disable user input so they don't screw it up
    stty -echo -icanon

    {
        # If this fails repeatedly increase the times
        sleep 1.5
        echo -e "\033[B"
        sleep 0.6
        echo -e "\r"
        sleep 0.6
        echo -e "\x04"
    } | pnpm inject
    INJECT_EXIT_CODE=$?

    stty echo icanon

    if [ $INJECT_EXIT_CODE -eq 0 ]; then
        color 32 "Vencord successfully patched!"
    else
        color 31 "Vencord patching completed with errors."
    fi
}

update_plugins() {
    color 32 "Updating all plugins..."
    for plugin_dir in "$PLUGIN_REPOS"/*; do
        [ -d "$plugin_dir/.git" ] || continue
        local repo_name=$(basename "$plugin_dir")
        color 33 "Updating: $repo_name"
        git -C "$plugin_dir" pull >/dev/null 2>&1 || {
            color 31 "Failed to update $repo_name."
            exit 1
        }
        copy_plugin "$repo_name"
    done
    color 32 "All plugins updated!"
}

uninstall_cozi() {
    color 31 "Uninstalling Cozi and removing all related files..."
    rm -rf "$COZI_DIR" || {
        color 31 "Failed to remove Cozi directory."
        exit 1
    }
    color 32 "Cozi has been successfully uninstalled."
}

cozi_list() {
    color 36 "\nInstalled Plugins:"
    if [ -s "$PLUGIN_LIST" ]; then
        while IFS= read -r git_link; do
            repo_name=$(basename "$git_link" .git)
            echo -e "$(color 33 'Repo Name:') $(color 32 $repo_name)"
            echo -e "$(color 33 'Git Link:')  $(color 34 $git_link)\n"
        done <"$PLUGIN_LIST"
    else
        color 31 "No plugins are installed."
    fi
}
bold() {
  echo -e "\e[1m$1\e[0m"
}

cozi_help() {
    color 36 "
  ____ ___ ________ 
 / ___/ _ \__  /_ _|
| |  | | | |/ / | | 
| |__| |_| / /_ | | 
 \____\___/____|___|
    "
    color 35 "\n\nCozi - Vencord Plugin Manager"
    color 34 "\nMade by 1337isnot1337"
    color 35 "\nUsage: cozi [command] [arguments]"
    color 35 "\nMain Commands:"
    echo "  $(color 32 $(bold add)) [git link | file] - Add a plugin repository (single git link or file with git links)"
    echo "  $(color 32 $(bold patch))                 - Build & inject Vencord"
    color 35 "\nOther Commands:"
    echo "  $(color 33 $(bold delete)) [repo name]    - Remove a specific plugin repository"
    echo "  $(color 33 $(bold export)) [file]         - Export plugin configuration to a file"
    echo "  $(color 33 $(bold import)) [file]         - Import plugin configuration from a file"
    echo "  $(color 33 $(bold list))                  - List all installed plugins"
    echo "  $(color 33 $(bold status))                - Display a detailed status report of Cozi"
    echo "  $(color 33 $(bold update))                - Update all plugins"
    echo "  $(color 33 $(bold uninstall))             - Uninstall all cozi related files"
    echo "  $(color 33 $(bold help))                  - Show this help menu"
    echo ""
    color 35 Example:
    echo "  $(color 33 '    cozi') $(color 32 'add') $(color 33 'https://git.nin0.dev/userplugins/venfetch') - Add Venfetch to plugins" 
    echo "  $(color 33 '    cozi') $(color 32 'patch') - Patch Vencord so you can use the plugin"
    echo -e "\nMake sure you enable the plugins in settings!"
}

add_single_plugin() {
    local git_link="$1"
    local repo_name=$(basename "$git_link" .git)

    grep -q "^$git_link$" "$PLUGIN_LIST" && {
        color 33 "Plugin $repo_name already added."
        return
    }

    color 32 "Adding plugin: $repo_name..."
    git clone "$git_link" "$PLUGIN_REPOS/$repo_name" >/dev/null 2>&1 || {
        color 31 "Failed to clone $git_link."
        exit 1
    }
    echo "$git_link" >>"$PLUGIN_LIST"

    local package_json="$MAIN_REPO/package.json"
    local plugin_path="$PLUGIN_REPOS/$repo_name"

    if [ ! -f "$package_json" ]; then
        color 31 "Error: package.json not found."
        exit 1
    fi

    local installed_deps=$(jq -r '.dependencies + .devDependencies | keys[]' "$package_json")
    local imports=$(grep -Pohr '(?<=from\s+["'''"])(.+?)(?=["'''"])' "$plugin_path" >/dev/null 2>&1 | sort -u)

    for import in $imports; do
        if [[ ! "$import" =~ ^(\.|\/) ]] && ! echo "$installed_deps" | grep -q "^$import$"; then
            color 33 "Installing missing dependency: $import"
            pnpm install "$import" --prefix "$MAIN_REPO" >/dev/null 2>&1 || {
                color 31 "Failed to install $import."
                exit 1
            }
        fi
    done

    copy_plugin "$repo_name"
}
main() {
    [ "$1" == "-v" ] || [ "$1" == "verbose" ] && VERBOSE=true && shift
    initialize_cozi
    case "$1" in
    add)
        if [ -z "$2" ]; then
            color 31 "Error: No plugin git link or file provided."
            exit 1
        fi
        add_plugin "$2"
        ;;
    delete) delete_plugin "$2" ;;
    export) cozi_export "$2" ;;
    import) cozi_import "$2" ;;
    list) cozi_list ;;
    patch) patch_vencord ;;
    status) cozi_status ;;
    update) update_plugins ;;
    uninstall) uninstall_cozi ;;
    help) cozi_help ;;
    *)
        cozi_help
        exit 1
        ;;
    esac
}
cozi_status() {
    color 36 "\n=== Cozi Status Report ==="

    # Check for main repository
    if [ -d "$MAIN_REPO" ]; then
        color 33 "Vencord Repository: $(color 32 Found)"
        color 34 "Path: $MAIN_REPO"
    else
        color 31 "Error: Vencord repository not found. Did you initialize Cozi?"
        return 1
    fi

    # Check for installed plugins
    local plugin_count=$(wc -l <"$PLUGIN_LIST" 2>/dev/null || echo 0)
    if [ "$plugin_count" -gt 0 ]; then
        color 33 "\nInstalled Plugins: $(color 32 $plugin_count)"
        while IFS= read -r plugin; do
            local repo_name=$(basename "$plugin" .git)
            local plugin_path="$PLUGIN_REPOS/$repo_name"

            if [ -d "$plugin_path" ]; then
                color 32 "  - $repo_name: $(color 34 Installed)"
                color 34 "    Repository: $plugin"
                if git -C "$plugin_path" rev-parse HEAD >/dev/null 2>&1; then
                    local commit_hash=$(git -C "$plugin_path" rev-parse --short HEAD)
                    local branch_name=$(git -C "$plugin_path" symbolic-ref --short HEAD)
                    color 34 "    Current Commit: $commit_hash (Branch: $branch_name)"
                else
                    color 31 "    Error: Unable to fetch commit details."
                fi
            else
                color 31 "  - $repo_name: $(color 31 Missing)"
            fi
        done <"$PLUGIN_LIST"
    else
        color 31 "\nNo plugins installed."
    fi

    # Check Node.js version
    if node --version >/dev/null 2>&1; then
        local node_version=$(node --version)
        color 33 "\nNode.js Version: $(color 32 $node_version)"
    else
        color 31 "\nError: Node.js is not installed or not in PATH."
    fi

    # Check pnpm version
    if pnpm --version >/dev/null 2>&1; then
        local pnpm_version=$(pnpm --version)
        color 33 "pnpm Version: $(color 32 $pnpm_version)"
    else
        color 31 "Error: pnpm is not installed or not in PATH."
    fi

    # Check package.json dependencies
    if [ -f "$MAIN_REPO/package.json" ]; then
        color 33 "\nDependencies in package.json:"
        local dependencies=$(jq -r '.dependencies // {} | keys[]' "$MAIN_REPO/package.json" 2>/dev/null)
        if [ -n "$dependencies" ]; then
            echo "$dependencies" | while IFS= read -r dep; do
                color 34 "  - $dep"
            done
        else
            color 31 "  No dependencies found."
        fi
    else
        color 31 "\nError: package.json not found in $MAIN_REPO."
    fi

    # Check for untracked files in the Vencord repo
    if git -C "$MAIN_REPO" status --porcelain >/dev/null 2>&1; then
        local untracked_files=$(git -C "$MAIN_REPO" status --porcelain)
        if [ -n "$untracked_files" ]; then
            color 33 "\nUntracked or Modified Files in Vencord Repository:"
            echo "$untracked_files" | while IFS= read -r file; do
                color 34 "  - $file"
            done
        else
            color 32 "\nNo untracked or modified files in Vencord repository."
        fi
    else
        color 31 "\nError: Unable to check Vencord repository status."
    fi

    color 36 "\n=== End of Cozi Status Report ==="
}

cozi_export() {
    local file_path="$1"
    if [ -z "$file_path" ]; then
        color 31 "Error: No file path provided."
        exit 1
    fi

    if [ ! -d "$(dirname "$file_path")" ]; then
        color 31 "Error: Directory for file does not exist."
        exit 1
    fi

    if [ ! -f "$PLUGIN_LIST" ]; then
        color 31 "Error: Plugin list file not found. Are any plugins installed?"
        exit 1
    fi

    cp "$PLUGIN_LIST" "$file_path" >/dev/null 2>&1 || {
        color 31 "Failed to export plugin configuration."
        exit 1
    }

    color 32 "Plugin configuration successfully exported to $file_path."
}

cozi_import() {
    local import_file="$1"
    if [ -z "$import_file" ] || [ ! -f "$import_file" ]; then
        color 31 "Error: Invalid or missing file for import."
        exit 1
    fi
    color 32 "Importing plugin configuration from: $import_file"
    while IFS= read -r line; do
        if [ -n "$line" ] && [[ ! "$line" =~ ^# ]]; then
            add_single_plugin "$line"
        fi
    done <"$import_file"
    color 32 "All plugins imported successfully!"
}

main "$@"
